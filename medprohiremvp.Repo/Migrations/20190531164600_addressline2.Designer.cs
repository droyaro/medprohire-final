// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using medprohiremvp.Repo.Context;

namespace medprohiremvp.Repo.Migrations
{
    [DbContext(typeof(AppUserContext))]
    [Migration("20190531164600_addressline2")]
    partial class addressline2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ApplicantAvailables", b =>
                {
                    b.Property<int>("ApplicantAvailable_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicantAvailableDays");

                    b.Property<int>("ApplicantAvailableType_ID");

                    b.Property<int>("Applicant_ID");

                    b.HasKey("ApplicantAvailable_ID");

                    b.HasIndex("ApplicantAvailableType_ID");

                    b.HasIndex("Applicant_ID");

                    b.ToTable("ApplicantAvailables");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ApplicantAvailableTypes", b =>
                {
                    b.Property<int>("ApplicantAvailableType_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicantAvailableType_Name");

                    b.HasKey("ApplicantAvailableType_ID");

                    b.ToTable("ApplicantAvailableTypes");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ApplicantCertificates", b =>
                {
                    b.Property<int>("Ceritification_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Applicant_ID");

                    b.Property<string>("CeritificationImg")
                        .IsRequired();

                    b.Property<int>("CertificateType_ID");

                    b.Property<string>("CertificateTypes")
                        .IsRequired();

                    b.HasKey("Ceritification_ID");

                    b.HasIndex("Applicant_ID");

                    b.HasIndex("CertificateType_ID");

                    b.ToTable("ApplicantCertificates");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.Applicants", b =>
                {
                    b.Property<int>("Applicant_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Atwork");

                    b.Property<int>("Availability_ID");

                    b.Property<bool>("BackgroundCheck");

                    b.Property<int>("BoardingProcess");

                    b.Property<bool>("CEU");

                    b.Property<string>("Contract");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<bool>("Drugscreen");

                    b.Property<int?>("DrugscreenStatus_ID");

                    b.Property<bool>("E_verify");

                    b.Property<string>("Employment_agreement");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("I_9");

                    b.Property<bool>("IsAvailable");

                    b.Property<bool>("IsEligible");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("MiddleName")
                        .IsRequired();

                    b.Property<string>("PreferredID");

                    b.Property<string>("ProfileImage");

                    b.Property<string>("Resume");

                    b.Property<string>("SSN");

                    b.Property<int>("Status_ID");

                    b.Property<string>("Sub_specialities");

                    b.Property<string>("TIN");

                    b.Property<Guid>("User_ID");

                    b.Property<int>("VisaStatus_ID");

                    b.Property<string>("W_4");

                    b.Property<bool>("WorkAuth");

                    b.HasKey("Applicant_ID");

                    b.HasIndex("Availability_ID");

                    b.HasIndex("DrugscreenStatus_ID");

                    b.HasIndex("User_ID")
                        .IsUnique();

                    b.HasIndex("VisaStatus_ID");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ApplicantSpecialities", b =>
                {
                    b.Property<int>("ApplicantSpeciality_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Applicant_ID");

                    b.Property<DateTime>("IssueDate");

                    b.Property<string>("LegabilityStates")
                        .IsRequired();

                    b.Property<string>("License")
                        .IsRequired();

                    b.Property<int>("Speciality_ID");

                    b.Property<int>("Status");

                    b.HasKey("ApplicantSpeciality_ID");

                    b.HasIndex("Applicant_ID");

                    b.HasIndex("Speciality_ID");

                    b.ToTable("ApplicantSpecialities");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ApplicantWorkHistories", b =>
                {
                    b.Property<int>("WorkHistory_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Applicant_ID");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("PlaceName")
                        .IsRequired();

                    b.Property<int>("Speciality_ID");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("WorkHistory_ID");

                    b.HasIndex("Applicant_ID");

                    b.HasIndex("Speciality_ID");

                    b.ToTable("ApplicantWorkHistories");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.Availabilities", b =>
                {
                    b.Property<int>("Availability_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Availability")
                        .IsRequired();

                    b.HasKey("Availability_ID");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.CertificateTypes", b =>
                {
                    b.Property<int>("Certificate_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CertificateTypeName")
                        .IsRequired();

                    b.HasKey("Certificate_ID");

                    b.ToTable("CertificateTypes");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.Cities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Latitude");

                    b.Property<float>("Longitude");

                    b.Property<string>("MaxZipCode");

                    b.Property<string>("MinZipCode");

                    b.Property<string>("city_name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("country_id");

                    b.Property<int>("state_id");

                    b.HasKey("id");

                    b.HasIndex("country_id");

                    b.HasIndex("state_id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ClientShifts", b =>
                {
                    b.Property<int>("ClientShift_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Available");

                    b.Property<int?>("Branch_ID");

                    b.Property<int>("Category_ID");

                    b.Property<DateTime>("ClockInTime");

                    b.Property<DateTime>("ClockOutTime");

                    b.Property<bool>("Consecutive_Occurrences");

                    b.Property<int>("ContractorCount");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime>("DateOfShift");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("HolidayShift");

                    b.Property<float>("HourlyRate");

                    b.Property<int>("Institution_ID");

                    b.Property<int>("Occurrences");

                    b.Property<string>("Responsibility")
                        .IsRequired();

                    b.Property<string>("ShiftDescription")
                        .IsRequired();

                    b.Property<DateTime>("ShiftExpirationDate");

                    b.Property<int>("ShiftLabel_ID");

                    b.Property<string>("ShiftsDates")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.HasKey("ClientShift_ID");

                    b.HasIndex("Branch_ID");

                    b.HasIndex("Category_ID");

                    b.HasIndex("Institution_ID");

                    b.HasIndex("ShiftLabel_ID");

                    b.ToTable("ClientShifts");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ClinicalInstitutionBranches", b =>
                {
                    b.Property<int>("Branch_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("BranchName")
                        .IsRequired();

                    b.Property<int>("CityId");

                    b.Property<string>("ContactName")
                        .IsRequired();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Email");

                    b.Property<int>("Institution_ID");

                    b.Property<float>("Latitude");

                    b.Property<float>("Longitude");

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<string>("ZipCode")
                        .IsRequired();

                    b.HasKey("Branch_ID");

                    b.HasIndex("Institution_ID");

                    b.ToTable("ClinicalInstitutionBranches");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ClinicalInstitutions", b =>
                {
                    b.Property<int>("Institution_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactPerson")
                        .IsRequired();

                    b.Property<string>("ContactTitle")
                        .IsRequired();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("InstitutionDescription");

                    b.Property<string>("InstitutionName")
                        .IsRequired();

                    b.Property<string>("InstitutionTaxId")
                        .IsRequired();

                    b.Property<int>("InstitutionType_ID");

                    b.Property<string>("Logo");

                    b.Property<string>("Specialties");

                    b.Property<int>("Status");

                    b.Property<Guid>("User_ID");

                    b.HasKey("Institution_ID");

                    b.HasIndex("InstitutionType_ID");

                    b.HasIndex("User_ID")
                        .IsUnique();

                    b.ToTable("ClinicalInstitutions");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.Countries", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("shortname")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.HasKey("id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.DrugscreenStatuses", b =>
                {
                    b.Property<int>("DrugscreenStatus_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DrugscreenStatus")
                        .IsRequired();

                    b.HasKey("DrugscreenStatus_ID");

                    b.ToTable("DrugscreenStatuses");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.InstitutionTypes", b =>
                {
                    b.Property<int>("InstitutionType_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InstitutionTypeName")
                        .IsRequired();

                    b.HasKey("InstitutionType_ID");

                    b.ToTable("InstitutionTypes");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ShiftCategory", b =>
                {
                    b.Property<int>("Category_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName");

                    b.HasKey("Category_ID");

                    b.ToTable("ShiftCategory");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ShiftLabels", b =>
                {
                    b.Property<int>("ShiftLabel_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ShiftLabelName")
                        .IsRequired();

                    b.HasKey("ShiftLabel_ID");

                    b.ToTable("ShiftLabels");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ShiftSpecialities", b =>
                {
                    b.Property<int>("ShiftSpeciality_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientShift_ID");

                    b.Property<int>("Speciality_ID");

                    b.HasKey("ShiftSpeciality_ID");

                    b.HasIndex("ClientShift_ID");

                    b.HasIndex("Speciality_ID");

                    b.ToTable("ShiftSpecialities");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.Specialities", b =>
                {
                    b.Property<int>("Speciality_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SpecialityName")
                        .IsRequired();

                    b.HasKey("Speciality_ID");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.States", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("country_id");

                    b.Property<string>("state_name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("id");

                    b.HasIndex("country_id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.VisaStatuses", b =>
                {
                    b.Property<int>("VisaStatus_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("VisaStatus")
                        .IsRequired();

                    b.HasKey("VisaStatus_ID");

                    b.ToTable("VisaStatuses");
                });

            modelBuilder.Entity("medprohiremvp.DATA.IdentityModels.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("medprohiremvp.DATA.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<string>("Address2");

                    b.Property<int>("ChangesCount");

                    b.Property<bool>("ChangesLocked");

                    b.Property<DateTime>("ChangesMakedTime");

                    b.Property<int>("City_ID");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<float>("Latitude");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<float>("Longitude");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("TimeOffset");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("ZipCode")
                        .IsRequired();

                    b.Property<bool>("isVerified");

                    b.HasKey("Id");

                    b.HasIndex("City_ID");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ApplicantAvailables", b =>
                {
                    b.HasOne("medprohiremvp.DATA.Entity.ApplicantAvailableTypes", "ApplicantAvailableType")
                        .WithMany()
                        .HasForeignKey("ApplicantAvailableType_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("medprohiremvp.DATA.Entity.Applicants", "Applicant")
                        .WithMany("ApplicantAvailables")
                        .HasForeignKey("Applicant_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ApplicantCertificates", b =>
                {
                    b.HasOne("medprohiremvp.DATA.Entity.Applicants", "Applicant")
                        .WithMany("Certificates")
                        .HasForeignKey("Applicant_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("medprohiremvp.DATA.Entity.CertificateTypes", "CertificateType")
                        .WithMany()
                        .HasForeignKey("CertificateType_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.Applicants", b =>
                {
                    b.HasOne("medprohiremvp.DATA.Entity.Availabilities", "Availability")
                        .WithMany()
                        .HasForeignKey("Availability_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("medprohiremvp.DATA.Entity.DrugscreenStatuses", "DrugscreenStatus")
                        .WithMany()
                        .HasForeignKey("DrugscreenStatus_ID");

                    b.HasOne("medprohiremvp.DATA.IdentityModels.ApplicationUser", "User")
                        .WithOne("Applicant")
                        .HasForeignKey("medprohiremvp.DATA.Entity.Applicants", "User_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("medprohiremvp.DATA.Entity.VisaStatuses", "VisaStatus")
                        .WithMany()
                        .HasForeignKey("VisaStatus_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ApplicantSpecialities", b =>
                {
                    b.HasOne("medprohiremvp.DATA.Entity.Applicants", "Applicant")
                        .WithMany("Specialities")
                        .HasForeignKey("Applicant_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("medprohiremvp.DATA.Entity.Specialities", "Speciality")
                        .WithMany()
                        .HasForeignKey("Speciality_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ApplicantWorkHistories", b =>
                {
                    b.HasOne("medprohiremvp.DATA.Entity.Applicants", "Applicant")
                        .WithMany("WorkHistories")
                        .HasForeignKey("Applicant_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("medprohiremvp.DATA.Entity.Specialities", "Speciality")
                        .WithMany()
                        .HasForeignKey("Speciality_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.Cities", b =>
                {
                    b.HasOne("medprohiremvp.DATA.Entity.Countries", "country")
                        .WithMany("Cities")
                        .HasForeignKey("country_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("medprohiremvp.DATA.Entity.States", "state")
                        .WithMany("Cities")
                        .HasForeignKey("state_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ClientShifts", b =>
                {
                    b.HasOne("medprohiremvp.DATA.Entity.ClinicalInstitutionBranches", "Branches")
                        .WithMany()
                        .HasForeignKey("Branch_ID");

                    b.HasOne("medprohiremvp.DATA.Entity.ShiftCategory", "category")
                        .WithMany()
                        .HasForeignKey("Category_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("medprohiremvp.DATA.Entity.ClinicalInstitutions", "institution")
                        .WithMany("ClientShifts")
                        .HasForeignKey("Institution_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("medprohiremvp.DATA.Entity.ShiftLabels", "ShiftLabels")
                        .WithMany()
                        .HasForeignKey("ShiftLabel_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ClinicalInstitutionBranches", b =>
                {
                    b.HasOne("medprohiremvp.DATA.Entity.ClinicalInstitutions", "Institution")
                        .WithMany("Branches")
                        .HasForeignKey("Institution_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ClinicalInstitutions", b =>
                {
                    b.HasOne("medprohiremvp.DATA.Entity.InstitutionTypes", "InstitutionType")
                        .WithMany("ClinicalInstitutions")
                        .HasForeignKey("InstitutionType_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("medprohiremvp.DATA.IdentityModels.ApplicationUser", "User")
                        .WithOne("ClinicalInstitution")
                        .HasForeignKey("medprohiremvp.DATA.Entity.ClinicalInstitutions", "User_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.ShiftSpecialities", b =>
                {
                    b.HasOne("medprohiremvp.DATA.Entity.ClientShifts", "ClientShift")
                        .WithMany("ShiftSpecialities")
                        .HasForeignKey("ClientShift_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("medprohiremvp.DATA.Entity.Specialities", "Speciality")
                        .WithMany()
                        .HasForeignKey("Speciality_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("medprohiremvp.DATA.Entity.States", b =>
                {
                    b.HasOne("medprohiremvp.DATA.Entity.Countries", "country")
                        .WithMany("States")
                        .HasForeignKey("country_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("medprohiremvp.DATA.IdentityModels.ApplicationUser", b =>
                {
                    b.HasOne("medprohiremvp.DATA.Entity.Cities", "Cities")
                        .WithMany()
                        .HasForeignKey("City_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("medprohiremvp.DATA.IdentityModels.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("medprohiremvp.DATA.IdentityModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("medprohiremvp.DATA.IdentityModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("medprohiremvp.DATA.IdentityModels.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("medprohiremvp.DATA.IdentityModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("medprohiremvp.DATA.IdentityModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
